{"ast":null,"code":"import { TangentSpaceNormalMap } from '../constants.js';\nimport { Material } from './Material.js';\nimport { Vector2 } from '../math/Vector2.js';\nimport { Color } from '../math/Color.js';\n/**\n * @author WestLangley / http://github.com/WestLangley\n *\n * parameters = {\n *  color: <hex>,\n *  roughness: <float>,\n *  metalness: <float>,\n *  opacity: <float>,\n *\n *  map: new THREE.Texture( <Image> ),\n *\n *  lightMap: new THREE.Texture( <Image> ),\n *  lightMapIntensity: <float>\n *\n *  aoMap: new THREE.Texture( <Image> ),\n *  aoMapIntensity: <float>\n *\n *  emissive: <hex>,\n *  emissiveIntensity: <float>\n *  emissiveMap: new THREE.Texture( <Image> ),\n *\n *  bumpMap: new THREE.Texture( <Image> ),\n *  bumpScale: <float>,\n *\n *  normalMap: new THREE.Texture( <Image> ),\n *  normalMapType: THREE.TangentSpaceNormalMap,\n *  normalScale: <Vector2>,\n *\n *  displacementMap: new THREE.Texture( <Image> ),\n *  displacementScale: <float>,\n *  displacementBias: <float>,\n *\n *  roughnessMap: new THREE.Texture( <Image> ),\n *\n *  metalnessMap: new THREE.Texture( <Image> ),\n *\n *  alphaMap: new THREE.Texture( <Image> ),\n *\n *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n *  envMapIntensity: <float>\n *\n *  refractionRatio: <float>,\n *\n *  wireframe: <boolean>,\n *  wireframeLinewidth: <float>,\n *\n *  skinning: <bool>,\n *  morphTargets: <bool>,\n *  morphNormals: <bool>\n * }\n */\n\nfunction MeshStandardMaterial(parameters) {\n  Material.call(this);\n  this.defines = {\n    'STANDARD': ''\n  };\n  this.type = 'MeshStandardMaterial';\n  this.color = new Color(0xffffff); // diffuse\n\n  this.roughness = 1.0;\n  this.metalness = 0.0;\n  this.map = null;\n  this.lightMap = null;\n  this.lightMapIntensity = 1.0;\n  this.aoMap = null;\n  this.aoMapIntensity = 1.0;\n  this.emissive = new Color(0x000000);\n  this.emissiveIntensity = 1.0;\n  this.emissiveMap = null;\n  this.bumpMap = null;\n  this.bumpScale = 1;\n  this.normalMap = null;\n  this.normalMapType = TangentSpaceNormalMap;\n  this.normalScale = new Vector2(1, 1);\n  this.displacementMap = null;\n  this.displacementScale = 1;\n  this.displacementBias = 0;\n  this.roughnessMap = null;\n  this.metalnessMap = null;\n  this.alphaMap = null;\n  this.envMap = null;\n  this.envMapIntensity = 1.0;\n  this.refractionRatio = 0.98;\n  this.wireframe = false;\n  this.wireframeLinewidth = 1;\n  this.wireframeLinecap = 'round';\n  this.wireframeLinejoin = 'round';\n  this.skinning = false;\n  this.morphTargets = false;\n  this.morphNormals = false;\n  this.setValues(parameters);\n}\n\nMeshStandardMaterial.prototype = Object.create(Material.prototype);\nMeshStandardMaterial.prototype.constructor = MeshStandardMaterial;\nMeshStandardMaterial.prototype.isMeshStandardMaterial = true;\n\nMeshStandardMaterial.prototype.copy = function (source) {\n  Material.prototype.copy.call(this, source);\n  this.defines = {\n    'STANDARD': ''\n  };\n  this.color.copy(source.color);\n  this.roughness = source.roughness;\n  this.metalness = source.metalness;\n  this.map = source.map;\n  this.lightMap = source.lightMap;\n  this.lightMapIntensity = source.lightMapIntensity;\n  this.aoMap = source.aoMap;\n  this.aoMapIntensity = source.aoMapIntensity;\n  this.emissive.copy(source.emissive);\n  this.emissiveMap = source.emissiveMap;\n  this.emissiveIntensity = source.emissiveIntensity;\n  this.bumpMap = source.bumpMap;\n  this.bumpScale = source.bumpScale;\n  this.normalMap = source.normalMap;\n  this.normalMapType = source.normalMapType;\n  this.normalScale.copy(source.normalScale);\n  this.displacementMap = source.displacementMap;\n  this.displacementScale = source.displacementScale;\n  this.displacementBias = source.displacementBias;\n  this.roughnessMap = source.roughnessMap;\n  this.metalnessMap = source.metalnessMap;\n  this.alphaMap = source.alphaMap;\n  this.envMap = source.envMap;\n  this.envMapIntensity = source.envMapIntensity;\n  this.refractionRatio = source.refractionRatio;\n  this.wireframe = source.wireframe;\n  this.wireframeLinewidth = source.wireframeLinewidth;\n  this.wireframeLinecap = source.wireframeLinecap;\n  this.wireframeLinejoin = source.wireframeLinejoin;\n  this.skinning = source.skinning;\n  this.morphTargets = source.morphTargets;\n  this.morphNormals = source.morphNormals;\n  return this;\n};\n\nexport { MeshStandardMaterial };","map":{"version":3,"sources":["C:/Users/APK/Desktop/Web Projects/PortfolioDesignRemastered/portfolio-design/node_modules/three/src/materials/MeshStandardMaterial.js"],"names":["TangentSpaceNormalMap","Material","Vector2","Color","MeshStandardMaterial","parameters","call","defines","type","color","roughness","metalness","map","lightMap","lightMapIntensity","aoMap","aoMapIntensity","emissive","emissiveIntensity","emissiveMap","bumpMap","bumpScale","normalMap","normalMapType","normalScale","displacementMap","displacementScale","displacementBias","roughnessMap","metalnessMap","alphaMap","envMap","envMapIntensity","refractionRatio","wireframe","wireframeLinewidth","wireframeLinecap","wireframeLinejoin","skinning","morphTargets","morphNormals","setValues","prototype","Object","create","constructor","isMeshStandardMaterial","copy","source"],"mappings":"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","sourcesContent":["import { TangentSpaceNormalMap } from '../constants.js';\nimport { Material } from './Material.js';\nimport { Vector2 } from '../math/Vector2.js';\nimport { Color } from '../math/Color.js';\n\n/**\n * @author WestLangley / http://github.com/WestLangley\n *\n * parameters = {\n *  color: <hex>,\n *  roughness: <float>,\n *  metalness: <float>,\n *  opacity: <float>,\n *\n *  map: new THREE.Texture( <Image> ),\n *\n *  lightMap: new THREE.Texture( <Image> ),\n *  lightMapIntensity: <float>\n *\n *  aoMap: new THREE.Texture( <Image> ),\n *  aoMapIntensity: <float>\n *\n *  emissive: <hex>,\n *  emissiveIntensity: <float>\n *  emissiveMap: new THREE.Texture( <Image> ),\n *\n *  bumpMap: new THREE.Texture( <Image> ),\n *  bumpScale: <float>,\n *\n *  normalMap: new THREE.Texture( <Image> ),\n *  normalMapType: THREE.TangentSpaceNormalMap,\n *  normalScale: <Vector2>,\n *\n *  displacementMap: new THREE.Texture( <Image> ),\n *  displacementScale: <float>,\n *  displacementBias: <float>,\n *\n *  roughnessMap: new THREE.Texture( <Image> ),\n *\n *  metalnessMap: new THREE.Texture( <Image> ),\n *\n *  alphaMap: new THREE.Texture( <Image> ),\n *\n *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n *  envMapIntensity: <float>\n *\n *  refractionRatio: <float>,\n *\n *  wireframe: <boolean>,\n *  wireframeLinewidth: <float>,\n *\n *  skinning: <bool>,\n *  morphTargets: <bool>,\n *  morphNormals: <bool>\n * }\n */\n\nfunction MeshStandardMaterial( parameters ) {\n\n\tMaterial.call( this );\n\n\tthis.defines = { 'STANDARD': '' };\n\n\tthis.type = 'MeshStandardMaterial';\n\n\tthis.color = new Color( 0xffffff ); // diffuse\n\tthis.roughness = 1.0;\n\tthis.metalness = 0.0;\n\n\tthis.map = null;\n\n\tthis.lightMap = null;\n\tthis.lightMapIntensity = 1.0;\n\n\tthis.aoMap = null;\n\tthis.aoMapIntensity = 1.0;\n\n\tthis.emissive = new Color( 0x000000 );\n\tthis.emissiveIntensity = 1.0;\n\tthis.emissiveMap = null;\n\n\tthis.bumpMap = null;\n\tthis.bumpScale = 1;\n\n\tthis.normalMap = null;\n\tthis.normalMapType = TangentSpaceNormalMap;\n\tthis.normalScale = new Vector2( 1, 1 );\n\n\tthis.displacementMap = null;\n\tthis.displacementScale = 1;\n\tthis.displacementBias = 0;\n\n\tthis.roughnessMap = null;\n\n\tthis.metalnessMap = null;\n\n\tthis.alphaMap = null;\n\n\tthis.envMap = null;\n\tthis.envMapIntensity = 1.0;\n\n\tthis.refractionRatio = 0.98;\n\n\tthis.wireframe = false;\n\tthis.wireframeLinewidth = 1;\n\tthis.wireframeLinecap = 'round';\n\tthis.wireframeLinejoin = 'round';\n\n\tthis.skinning = false;\n\tthis.morphTargets = false;\n\tthis.morphNormals = false;\n\n\tthis.setValues( parameters );\n\n}\n\nMeshStandardMaterial.prototype = Object.create( Material.prototype );\nMeshStandardMaterial.prototype.constructor = MeshStandardMaterial;\n\nMeshStandardMaterial.prototype.isMeshStandardMaterial = true;\n\nMeshStandardMaterial.prototype.copy = function ( source ) {\n\n\tMaterial.prototype.copy.call( this, source );\n\n\tthis.defines = { 'STANDARD': '' };\n\n\tthis.color.copy( source.color );\n\tthis.roughness = source.roughness;\n\tthis.metalness = source.metalness;\n\n\tthis.map = source.map;\n\n\tthis.lightMap = source.lightMap;\n\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\tthis.aoMap = source.aoMap;\n\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\tthis.emissive.copy( source.emissive );\n\tthis.emissiveMap = source.emissiveMap;\n\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\tthis.bumpMap = source.bumpMap;\n\tthis.bumpScale = source.bumpScale;\n\n\tthis.normalMap = source.normalMap;\n\tthis.normalMapType = source.normalMapType;\n\tthis.normalScale.copy( source.normalScale );\n\n\tthis.displacementMap = source.displacementMap;\n\tthis.displacementScale = source.displacementScale;\n\tthis.displacementBias = source.displacementBias;\n\n\tthis.roughnessMap = source.roughnessMap;\n\n\tthis.metalnessMap = source.metalnessMap;\n\n\tthis.alphaMap = source.alphaMap;\n\n\tthis.envMap = source.envMap;\n\tthis.envMapIntensity = source.envMapIntensity;\n\n\tthis.refractionRatio = source.refractionRatio;\n\n\tthis.wireframe = source.wireframe;\n\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\tthis.wireframeLinecap = source.wireframeLinecap;\n\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\tthis.skinning = source.skinning;\n\tthis.morphTargets = source.morphTargets;\n\tthis.morphNormals = source.morphNormals;\n\n\treturn this;\n\n};\n\n\nexport { MeshStandardMaterial };\n"]},"metadata":{},"sourceType":"module"}