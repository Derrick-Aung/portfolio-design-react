{"ast":null,"code":"/**\n * @author WestLangley / http://github.com/WestLangley\n */\nimport { LineSegments } from '../objects/LineSegments.js';\nimport { LineBasicMaterial } from '../materials/LineBasicMaterial.js';\nimport { BufferAttribute } from '../core/BufferAttribute.js';\nimport { Float32BufferAttribute } from '../core/BufferAttribute.js';\nimport { BufferGeometry } from '../core/BufferGeometry.js';\nimport { Object3D } from '../core/Object3D.js';\n\nfunction Box3Helper(box, color) {\n  this.type = 'Box3Helper';\n  this.box = box;\n  color = color || 0xffff00;\n  var indices = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]);\n  var positions = [1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1];\n  var geometry = new BufferGeometry();\n  geometry.setIndex(new BufferAttribute(indices, 1));\n  geometry.setAttribute('position', new Float32BufferAttribute(positions, 3));\n  LineSegments.call(this, geometry, new LineBasicMaterial({\n    color: color\n  }));\n  this.geometry.computeBoundingSphere();\n}\n\nBox3Helper.prototype = Object.create(LineSegments.prototype);\nBox3Helper.prototype.constructor = Box3Helper;\n\nBox3Helper.prototype.updateMatrixWorld = function (force) {\n  var box = this.box;\n  if (box.isEmpty()) return;\n  box.getCenter(this.position);\n  box.getSize(this.scale);\n  this.scale.multiplyScalar(0.5);\n  Object3D.prototype.updateMatrixWorld.call(this, force);\n};\n\nexport { Box3Helper };","map":{"version":3,"sources":["C:/Users/APK/Desktop/Web Projects/PortfolioDesignRemastered/portfolio-design/node_modules/three/src/helpers/Box3Helper.js"],"names":["LineSegments","LineBasicMaterial","BufferAttribute","Float32BufferAttribute","BufferGeometry","Object3D","Box3Helper","box","color","type","indices","Uint16Array","positions","geometry","setIndex","setAttribute","call","computeBoundingSphere","prototype","Object","create","constructor","updateMatrixWorld","force","isEmpty","getCenter","position","getSize","scale","multiplyScalar"],"mappings":"AAAA;;;AAIA,SAASA,YAAT,QAA6B,4BAA7B;AACA,SAASC,iBAAT,QAAkC,mCAAlC;AACA,SAASC,eAAT,QAAgC,4BAAhC;AACA,SAASC,sBAAT,QAAuC,4BAAvC;AACA,SAASC,cAAT,QAA+B,2BAA/B;AACA,SAASC,QAAT,QAAyB,qBAAzB;;AAEA,SAASC,UAAT,CAAqBC,GAArB,EAA0BC,KAA1B,EAAkC;AAEjC,OAAKC,IAAL,GAAY,YAAZ;AAEA,OAAKF,GAAL,GAAWA,GAAX;AAEAC,EAAAA,KAAK,GAAGA,KAAK,IAAI,QAAjB;AAEA,MAAIE,OAAO,GAAG,IAAIC,WAAJ,CAAiB,CAAE,CAAF,EAAK,CAAL,EAAQ,CAAR,EAAW,CAAX,EAAc,CAAd,EAAiB,CAAjB,EAAoB,CAApB,EAAuB,CAAvB,EAA0B,CAA1B,EAA6B,CAA7B,EAAgC,CAAhC,EAAmC,CAAnC,EAAsC,CAAtC,EAAyC,CAAzC,EAA4C,CAA5C,EAA+C,CAA/C,EAAkD,CAAlD,EAAqD,CAArD,EAAwD,CAAxD,EAA2D,CAA3D,EAA8D,CAA9D,EAAiE,CAAjE,EAAoE,CAApE,EAAuE,CAAvE,CAAjB,CAAd;AAEA,MAAIC,SAAS,GAAG,CAAE,CAAF,EAAK,CAAL,EAAQ,CAAR,EAAW,CAAE,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAE,CAAxB,EAA2B,CAAE,CAA7B,EAAgC,CAAhC,EAAmC,CAAnC,EAAsC,CAAE,CAAxC,EAA2C,CAA3C,EAA8C,CAA9C,EAAiD,CAAjD,EAAoD,CAAE,CAAtD,EAAyD,CAAE,CAA3D,EAA8D,CAA9D,EAAiE,CAAE,CAAnE,EAAsE,CAAE,CAAxE,EAA2E,CAAE,CAA7E,EAAgF,CAAE,CAAlF,EAAqF,CAArF,EAAwF,CAAE,CAA1F,EAA6F,CAAE,CAA/F,CAAhB;AAEA,MAAIC,QAAQ,GAAG,IAAIT,cAAJ,EAAf;AAEAS,EAAAA,QAAQ,CAACC,QAAT,CAAmB,IAAIZ,eAAJ,CAAqBQ,OAArB,EAA8B,CAA9B,CAAnB;AAEAG,EAAAA,QAAQ,CAACE,YAAT,CAAuB,UAAvB,EAAmC,IAAIZ,sBAAJ,CAA4BS,SAA5B,EAAuC,CAAvC,CAAnC;AAEAZ,EAAAA,YAAY,CAACgB,IAAb,CAAmB,IAAnB,EAAyBH,QAAzB,EAAmC,IAAIZ,iBAAJ,CAAuB;AAAEO,IAAAA,KAAK,EAAEA;AAAT,GAAvB,CAAnC;AAEA,OAAKK,QAAL,CAAcI,qBAAd;AAEA;;AAEDX,UAAU,CAACY,SAAX,GAAuBC,MAAM,CAACC,MAAP,CAAepB,YAAY,CAACkB,SAA5B,CAAvB;AACAZ,UAAU,CAACY,SAAX,CAAqBG,WAArB,GAAmCf,UAAnC;;AAEAA,UAAU,CAACY,SAAX,CAAqBI,iBAArB,GAAyC,UAAWC,KAAX,EAAmB;AAE3D,MAAIhB,GAAG,GAAG,KAAKA,GAAf;AAEA,MAAKA,GAAG,CAACiB,OAAJ,EAAL,EAAqB;AAErBjB,EAAAA,GAAG,CAACkB,SAAJ,CAAe,KAAKC,QAApB;AAEAnB,EAAAA,GAAG,CAACoB,OAAJ,CAAa,KAAKC,KAAlB;AAEA,OAAKA,KAAL,CAAWC,cAAX,CAA2B,GAA3B;AAEAxB,EAAAA,QAAQ,CAACa,SAAT,CAAmBI,iBAAnB,CAAqCN,IAArC,CAA2C,IAA3C,EAAiDO,KAAjD;AAEA,CAdD;;AAgBA,SAASjB,UAAT","sourcesContent":["/**\n * @author WestLangley / http://github.com/WestLangley\n */\n\nimport { LineSegments } from '../objects/LineSegments.js';\nimport { LineBasicMaterial } from '../materials/LineBasicMaterial.js';\nimport { BufferAttribute } from '../core/BufferAttribute.js';\nimport { Float32BufferAttribute } from '../core/BufferAttribute.js';\nimport { BufferGeometry } from '../core/BufferGeometry.js';\nimport { Object3D } from '../core/Object3D.js';\n\nfunction Box3Helper( box, color ) {\n\n\tthis.type = 'Box3Helper';\n\n\tthis.box = box;\n\n\tcolor = color || 0xffff00;\n\n\tvar indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );\n\n\tvar positions = [ 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, - 1, 1, 1, 1, - 1, - 1, 1, - 1, - 1, - 1, - 1, 1, - 1, - 1 ];\n\n\tvar geometry = new BufferGeometry();\n\n\tgeometry.setIndex( new BufferAttribute( indices, 1 ) );\n\n\tgeometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\n\n\tLineSegments.call( this, geometry, new LineBasicMaterial( { color: color } ) );\n\n\tthis.geometry.computeBoundingSphere();\n\n}\n\nBox3Helper.prototype = Object.create( LineSegments.prototype );\nBox3Helper.prototype.constructor = Box3Helper;\n\nBox3Helper.prototype.updateMatrixWorld = function ( force ) {\n\n\tvar box = this.box;\n\n\tif ( box.isEmpty() ) return;\n\n\tbox.getCenter( this.position );\n\n\tbox.getSize( this.scale );\n\n\tthis.scale.multiplyScalar( 0.5 );\n\n\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n};\n\nexport { Box3Helper };\n"]},"metadata":{},"sourceType":"module"}