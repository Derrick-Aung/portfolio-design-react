{"ast":null,"code":"// ES6 Class\nclass TypeWriter {\n  constructor(txtElement, words, wait = 3000) {\n    this.txtElement = txtElement;\n    this.words = words;\n    this.txt = '';\n    this.wordIndex = 0;\n    this.wait = parseInt(wait, 10);\n    this.type();\n    this.isDeleting = false;\n  }\n\n  type() {\n    // Current index of word\n    const current = this.wordIndex % this.words.length; // Get full text of current word\n\n    const fullTxt = this.words[current]; // Check if deleting\n\n    if (this.isDeleting) {\n      // Remove char\n      this.txt = fullTxt.substring(0, this.txt.length - 1);\n    } else {\n      // Add char\n      this.txt = fullTxt.substring(0, this.txt.length + 1);\n    } // Insert txt into element\n\n\n    this.txtElement.innerHTML = `<span class=\"txt\">${this.txt}</span>`; // Initial Type Speed\n\n    let typeSpeed = 200;\n\n    if (this.isDeleting) {\n      typeSpeed /= 2;\n    } // If word is complete\n\n\n    if (!this.isDeleting && this.txt === fullTxt) {\n      // Make pause at end\n      typeSpeed = this.wait; // Set delete to true\n\n      this.isDeleting = true;\n    } else if (this.isDeleting && this.txt === '') {\n      this.isDeleting = false; // Move to next word\n\n      this.wordIndex++; // Pause before start typing\n\n      typeSpeed = 500;\n    }\n\n    setTimeout(() => this.type(), typeSpeed);\n  }\n\n} // Init On DOM Load\n\n\ndocument.addEventListener('DOMContentLoaded', init); // Init App\n\nfunction init() {\n  const txtElement = document.querySelector('.txt-type');\n  const words = JSON.parse(txtElement.getAttribute('data-words'));\n  const wait = txtElement.getAttribute('data-wait'); // Init TypeWriter\n\n  new TypeWriter(txtElement, words, wait);\n}","map":{"version":3,"sources":["C:/Users/APK/Desktop/Web Projects/PortfolioDesignRemastered/portfolio-design/src/effects/typewrite.js"],"names":["TypeWriter","constructor","txtElement","words","wait","txt","wordIndex","parseInt","type","isDeleting","current","length","fullTxt","substring","innerHTML","typeSpeed","setTimeout","document","addEventListener","init","querySelector","JSON","parse","getAttribute"],"mappings":"AAAA;AACA,MAAMA,UAAN,CAAiB;AACbC,EAAAA,WAAW,CAACC,UAAD,EAAaC,KAAb,EAAoBC,IAAI,GAAG,IAA3B,EAAiC;AAC1C,SAAKF,UAAL,GAAkBA,UAAlB;AACA,SAAKC,KAAL,GAAaA,KAAb;AACA,SAAKE,GAAL,GAAW,EAAX;AACA,SAAKC,SAAL,GAAiB,CAAjB;AACA,SAAKF,IAAL,GAAYG,QAAQ,CAACH,IAAD,EAAO,EAAP,CAApB;AACA,SAAKI,IAAL;AACA,SAAKC,UAAL,GAAkB,KAAlB;AACD;;AAEDD,EAAAA,IAAI,GAAG;AACL;AACA,UAAME,OAAO,GAAG,KAAKJ,SAAL,GAAiB,KAAKH,KAAL,CAAWQ,MAA5C,CAFK,CAGL;;AACA,UAAMC,OAAO,GAAG,KAAKT,KAAL,CAAWO,OAAX,CAAhB,CAJK,CAML;;AACA,QAAG,KAAKD,UAAR,EAAoB;AAClB;AACA,WAAKJ,GAAL,GAAWO,OAAO,CAACC,SAAR,CAAkB,CAAlB,EAAqB,KAAKR,GAAL,CAASM,MAAT,GAAkB,CAAvC,CAAX;AACD,KAHD,MAGO;AACL;AACA,WAAKN,GAAL,GAAWO,OAAO,CAACC,SAAR,CAAkB,CAAlB,EAAqB,KAAKR,GAAL,CAASM,MAAT,GAAkB,CAAvC,CAAX;AACD,KAbI,CAeL;;;AACA,SAAKT,UAAL,CAAgBY,SAAhB,GAA6B,qBAAoB,KAAKT,GAAI,SAA1D,CAhBK,CAkBL;;AACA,QAAIU,SAAS,GAAG,GAAhB;;AAEA,QAAG,KAAKN,UAAR,EAAoB;AAClBM,MAAAA,SAAS,IAAI,CAAb;AACD,KAvBI,CAyBL;;;AACA,QAAG,CAAC,KAAKN,UAAN,IAAoB,KAAKJ,GAAL,KAAaO,OAApC,EAA6C;AAC3C;AACAG,MAAAA,SAAS,GAAG,KAAKX,IAAjB,CAF2C,CAG3C;;AACA,WAAKK,UAAL,GAAkB,IAAlB;AACD,KALD,MAKO,IAAG,KAAKA,UAAL,IAAmB,KAAKJ,GAAL,KAAa,EAAnC,EAAuC;AAC5C,WAAKI,UAAL,GAAkB,KAAlB,CAD4C,CAE5C;;AACA,WAAKH,SAAL,GAH4C,CAI5C;;AACAS,MAAAA,SAAS,GAAG,GAAZ;AACD;;AAEDC,IAAAA,UAAU,CAAC,MAAM,KAAKR,IAAL,EAAP,EAAoBO,SAApB,CAAV;AACD;;AAnDY,C,CAuDf;;;AACAE,QAAQ,CAACC,gBAAT,CAA0B,kBAA1B,EAA8CC,IAA9C,E,CAEA;;AACA,SAASA,IAAT,GAAgB;AACd,QAAMjB,UAAU,GAAGe,QAAQ,CAACG,aAAT,CAAuB,WAAvB,CAAnB;AACA,QAAMjB,KAAK,GAAGkB,IAAI,CAACC,KAAL,CAAWpB,UAAU,CAACqB,YAAX,CAAwB,YAAxB,CAAX,CAAd;AACA,QAAMnB,IAAI,GAAGF,UAAU,CAACqB,YAAX,CAAwB,WAAxB,CAAb,CAHc,CAId;;AACA,MAAIvB,UAAJ,CAAeE,UAAf,EAA2BC,KAA3B,EAAkCC,IAAlC;AACD","sourcesContent":["// ES6 Class\r\nclass TypeWriter {\r\n    constructor(txtElement, words, wait = 3000) {\r\n      this.txtElement = txtElement;\r\n      this.words = words;\r\n      this.txt = '';\r\n      this.wordIndex = 0;\r\n      this.wait = parseInt(wait, 10);\r\n      this.type();\r\n      this.isDeleting = false;\r\n    }\r\n  \r\n    type() {\r\n      // Current index of word\r\n      const current = this.wordIndex % this.words.length;\r\n      // Get full text of current word\r\n      const fullTxt = this.words[current];\r\n  \r\n      // Check if deleting\r\n      if(this.isDeleting) {\r\n        // Remove char\r\n        this.txt = fullTxt.substring(0, this.txt.length - 1);\r\n      } else {\r\n        // Add char\r\n        this.txt = fullTxt.substring(0, this.txt.length + 1);\r\n      }\r\n  \r\n      // Insert txt into element\r\n      this.txtElement.innerHTML = `<span class=\"txt\">${this.txt}</span>`;\r\n  \r\n      // Initial Type Speed\r\n      let typeSpeed = 200;\r\n  \r\n      if(this.isDeleting) {\r\n        typeSpeed /= 2;\r\n      }\r\n  \r\n      // If word is complete\r\n      if(!this.isDeleting && this.txt === fullTxt) {\r\n        // Make pause at end\r\n        typeSpeed = this.wait;\r\n        // Set delete to true\r\n        this.isDeleting = true;\r\n      } else if(this.isDeleting && this.txt === '') {\r\n        this.isDeleting = false;\r\n        // Move to next word\r\n        this.wordIndex++;\r\n        // Pause before start typing\r\n        typeSpeed = 500;\r\n      }\r\n  \r\n      setTimeout(() => this.type(), typeSpeed);\r\n    }\r\n  }\r\n  \r\n  \r\n  // Init On DOM Load\r\n  document.addEventListener('DOMContentLoaded', init);\r\n  \r\n  // Init App\r\n  function init() {\r\n    const txtElement = document.querySelector('.txt-type');\r\n    const words = JSON.parse(txtElement.getAttribute('data-words'));\r\n    const wait = txtElement.getAttribute('data-wait');\r\n    // Init TypeWriter\r\n    new TypeWriter(txtElement, words, wait);\r\n  }\r\n"]},"metadata":{},"sourceType":"module"}